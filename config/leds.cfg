# function createRemap(inMin, inMax, outMin, outMax) {
#     return function remaper(x) {
#         return (x - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;
#     };
# }
# const vc2float = createRemap(0, 255, 0, 1);

[neopixel sb_leds]
pin: PA8
#   The pin connected to the neopixel. This parameter must be provided.
chain_count: 15 #last 3 is stealthburner
#   The number of Neopixel chips that are "daisy chained" to the
#   provided pin. The default is 1 (which indicates only a single
#   Neopixel is connected to the pin).
color_order: GRB
initial_RED: 0.156
initial_GREEN: 0.078
initial_BLUE: 0.039


[delayed_gcode set_ready_default_state]
initial_duration: 1.0 #   The duration of the initial delay (in seconds).
gcode:
  STATUS_READY
  BAR_LEDS_OFF


[gcode_button toggle_leds_bar]
pin: PC12
press_gcode:
  {% if printer["gcode_macro _sb_vars"].is_bar_on  %}
    BAR_LEDS_OFF
  {% else %} 
    BAR_LEDS_ON
  {% endif %}

#release_gcode:
#   A list of G-Code commands to execute when the button is released.
#   G-Code templates are supported. The default is to not run any
#   commands on a button release.



#####################################
#           INSTRUCTIONS            #
#####################################
# How to use all this stuff:
#
#     1.  Copy this .cfg file into your Klipper config directory and then add [include stealthburner_leds.cfg]
#         to the top of your printer.cfg in order to register the LEDs and macros with Klipper.
#     2.  Define your LEDs by editing [neopixel sb_leds] below and entering the data pin from your control board
#         as well as the color order.
#
#           Note: RGB and RGBW are different and must be defined explicitly.  RGB and RGBW are also not able to 
#                 be mix-and-matched in the same chain. A separate data line would be needed for proper functioning.
#
#                 RGBW LEDs will have a visible yellow-ish phosphor section to the chip.  If your LEDs do not have
#                 this yellow portion, you have RGB LEDs.
#
#     3.  Save your config and restart Klipper.
#
#           Note: We set RED and BLUE to 1.0 to make it easier for users and supporters to detect 
#                 misconfigurations or miswiring. The default color format is for Neopixels with a dedicated 
#                 white LED. On startup, all three SB LEDs should light up.
#
#                 If you get random colors across your LEDs, change the color_order to GRB and restart. Then
#                 omit the W for each suggested color_order in the next paragraph.
#
#                 If you get MAGENTA, your  color order is correct. If you get CYAN, you need to use RGBW. If
#                 you get YELLOW, you need to use BRGW (note that BRG is only supported in the latest Klipper
#                 version).
#
#     4.  Once you have confirmed that the LEDs are set up correctly, you must now decide where you want 
#         these macros called up...which means adding them to your existing gcode macros.  NOTHING will happen
#         unless you add the STATUS_????? macros to your existing gcode macros.  
#
#           Example: add STATUS_LEVELING to the beginning of your QGL gcode macro, and then add STATUS_READY 
#                    to the end of it to set the logo LED and nozzle LEDs back to the `ready` state.
#
#           Example: add STATUS_CLEANING to the beginning of your nozzle-cleaning macro, and then STATUS_READY
#                    to the end of it to return the LEDs back to `ready` state.
#
#     5.  Feel free to change colors of each macro, create new ones if you have a need to.  The macros provided below
#         are just an example of what is possible.  If you want to try some more complex animations, you will most
#         likely have to use WLED with Moonraker and a small micro-controller 
#
#####################################
#       END INSTRUCTRUCTIONS        #
#####################################

# Most configuration for the macros can be done by modifying the variables in the _sb_vars macro
# at the start of this file.

##########
# MACROS #
##########

# The following status macros are available (these go inside of your macros):
#
#    STATUS_READY
#    STATUS_OFF
#    STATUS_BUSY
#    STATUS_HEATING
#    STATUS_LEVELING
#    STATUS_HOMING
#    STATUS_CLEANING
#    STATUS_MESHING
#    STATUS_CALIBRATING_Z
#    STATUS_PRINTING 
#
# With additional macros for basic control:
#
#    SET_NOZZLE_LEDS_ON
#    SET_LOGO_LEDS_OFF
#    SET_NOZZLE_LEDS_OFF
#
# Contributed by Voron discord users wile.e, Tetsunosuke, and etherwalker


[gcode_macro _sb_vars]
# User settings for the StealthBurner status leds. You can change the status colors and led
# configurations for the logo and nozzle here.
variable_colors: {
        'logo': { # Colors for logo states
            'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0},
            'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35},
            'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0},
            'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2},
            'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4},
            'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0},
            'off': {'r': 0.0, 'g': 0.0, 'b': 0.0},
            'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0},
            'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01},
        },
        'nozzle': { # Colors for nozzle states
            'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0},
            'off': {'r': 0.0, 'g': 0.0, 'b': 0.0},
            'on': {'r': 0.2, 'g': 0.06, 'b': 0.2},
            'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0},
        },
        'bar': { # Colors for bar leds states
            'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0},
            'off': {'r': 0.0, 'g': 0.0, 'b': 0.0},
            'on': {'r': 1, 'g': 0.392, 'b': 0.109},
            'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0},
        },
        'thermal': {
            'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0},
            'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3}
        }
    }
variable_logo_led_name:         "sb_leds" 
# The name of the addressable LED chain that contains the logo LED(s)
variable_logo_idx:              "13" # "16" 
# A comma-separated list of indexes LEDs in the logo
variable_nozzle_led_name:       "sb_leds"
# The name of the addressable LED chain that contains the nozzle LED(s). This will
# typically be the same LED chain as the logo.
variable_nozzle_idx:            "14,15" # "17,18"
# Top bar leds
variable_bar_led_name:          "sb_leds"
variable_bar_idx:               "1,2,3,4,5,6,7,8,9,10,11,12"
variable_is_bar_on:             True
# A comma-separated list of indexes of LEDs in the nozzle
gcode:
    # This section is required.  Do Not Delete.

# [display_template led_extruder_temp_glow]
# text:
#     {% if printer.extruder.target > 0.0 %}
#         {%  set temp = printer.extruder.target %}
#     {% else %}
#         {% set temp = printer.configfile.config.extruder.max_temp %}
#     {% endif %}
#     {% set ratio = printer.extruder.temperature / temp|float %}
#     {ratio}, 0.0, {1-ratio}, 0.0

[gcode_macro _set_sb_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set led = params.LED|string %}
    {% set idx = (params.IDX|string).split(',') %}
    {% set transmit_last = params.TRANSMIT|default(1) %}
    SET_LED_TEMPLATE LED={led} TEMPLATE="" # clear template, if it was set
    {% for led_index in idx %}
        {% set transmit=transmit_last if loop.last else 0 %}
        set_led led={led} red={red} green={green} blue={blue} index={led_index} transmit={transmit}
    {% endfor %}

[gcode_macro _set_sb_leds_by_name]
gcode:
    {% set leds_name = params.LEDS %}
    {% set color_name = params.COLOR %}
    {% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}
    {% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}
    {% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}
    {% set transmit = params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} idx="{idx}" transmit={transmit}

[gcode_macro _set_sb_leds_template]
gcode:
    {% set led = params.LED|string %}
    {% set idx = (params.IDX|string).split(',') %}
    {% set variant = (params.VARIANT|string) %}


    {% for led_index in idx %} 
    #                                         _tpl_extruder_temp_glow
        SET_LED_TEMPLATE LED={led} TEMPLATE={'_tpl_' ~ variant } INDEX={led_index}
    {% endfor %}

[gcode_macro _set_sb_leds_template_by_name]
gcode:
    {% set leds_name = params.LEDS %}
    {% set color_name = params.COLOR %}
    {% set variant = params.VARIANT %}
    #{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}
    {% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}
    {% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}

    _set_sb_leds_template led={led} idx="{idx}" variant="{variant}"


[gcode_macro _set_logo_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set led = printer["gcode_macro _sb_vars"].logo_led_name %}
    {% set idx = printer["gcode_macro _sb_vars"].logo_idx %}
    {% set transmit=params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={red} green={green} blue={blue}  idx="{idx}" transmit={transmit}

[gcode_macro _set_nozzle_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}
    {% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}
    {% set transmit=params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={red} green={green} blue={blue} idx="{idx}" transmit={transmit}

[gcode_macro set_logo_leds_off]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_logo_leds red=0 blue=0 green=0 transmit={transmit}

[gcode_macro set_nozzle_leds_on]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}

[gcode_macro set_nozzle_leds_off]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}

[gcode_macro status_off]
gcode:
    set_logo_leds_off transmit=0
    set_nozzle_leds_off

[gcode_macro status_ready]
gcode:
    _set_sb_leds_by_name leds="logo" color="standby" transmit=0
    _set_sb_leds_by_name leds="nozzle" color="standby" transmit=1

[gcode_macro status_busy]
gcode:
    _set_sb_leds_by_name leds="logo" color="busy" transmit=0
    set_nozzle_leds_on

# [gcode_macro status_heating]
# gcode:
#     _set_sb_leds_by_name leds="logo" color="heating" transmit=0
#     _set_sb_leds_by_name leds="nozzle" color="heating" transmit=1

[gcode_macro status_leveling]
gcode:
    _set_sb_leds_by_name leds="logo" color="leveling" transmit=0
    set_nozzle_leds_on

[gcode_macro status_homing]
gcode:
    _set_sb_leds_by_name leds="logo" color="homing" transmit=0
    set_nozzle_leds_on

[gcode_macro status_meshing]
gcode:
    _set_sb_leds_by_name leds="logo" color="meshing" transmit=0
    set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode:
    _set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0
    set_nozzle_leds_on

[gcode_macro status_printing]
gcode:
    _set_sb_leds_by_name leds="logo" color="printing" transmit=0
    set_nozzle_leds_on


[display_template _tpl_extruder_temp_glow]
text:
    {% if printer.extruder.target > 0.0 %}
        {%  set temp = printer.extruder.target %}
    {% else %}
        {% set temp = printer.configfile.config.extruder.max_temp %}
    {% endif %}
    {% set ratio = printer.extruder.temperature / temp|float %}
    {ratio}, 0.0, {1-ratio}, 0.0


[display_template _tpl_bed_temp_glow]
text:
    {% if printer.heater_bed.target > 0.0 %}
        {%  set temp = printer.heater_bed.target %}
    {% else %}
        {% set temp = printer.configfile.config.heater_bed.max_temp %}
    {% endif %}
    {% set ratio = printer.heater_bed.temperature / temp|float %}
    {ratio}, 0.0, {1-ratio}, 0.0

[gcode_macro status_heating]
gcode:
    _set_sb_leds_template_by_name leds="logo" variant="extruder_temp_glow"
    _set_sb_leds_template_by_name leds="nozzle" variant="bed_temp_glow"
    # {% if printer["gcode_macro _sb_vars"].is_bar_on  %}
    #     _set_sb_leds_template_by_name leds="bar" variant="bed_temp_glow"
    # {% endif %} 

[gcode_macro bar_leds_on]
gcode:
    _set_sb_leds_by_name leds="bar" color="on" transmit=2
    SET_GCODE_VARIABLE MACRO=_sb_vars VARIABLE=is_bar_on VALUE=True

[gcode_macro bar_leds_off]
gcode:
    _set_sb_leds_by_name leds="bar" color="off" transmit=2
    SET_GCODE_VARIABLE MACRO=_sb_vars VARIABLE=is_bar_on VALUE=False