
# Cura Example start
# START_PRINT BED_TEMP={material_bed_temperature_layer_0} EXTRUDER_TEMP={material_print_temperature_layer_0}
[gcode_macro START_PRINT]
gcode:
  {% if 'save_variables' in printer %}
    {% set svv = printer.save_variables.variables %}
    {% set gcodepath = printer.configfile.config.virtual_sdcard.path %}
    {% set filepath=printer.virtual_sdcard.file_path %}
    SAVE_VARIABLE VARIABLE=last_file VALUE='"{ filepath }"'
  {% else %}
      RESPOND TYPE=error MSG="save_variables config section not defined"
  {% endif %}

    # reset acceleration 
  {% set ACCEL_DEFAULT = printer.configfile.settings['printer'].max_accel|float %}
  {% set ACCEL_TO_DECEL_DEFAULT = printer.configfile.settings['printer'].max_accel_to_decel|float %}
  SET_VELOCITY_LIMIT ACCEL={ACCEL_DEFAULT}
  SET_VELOCITY_LIMIT ACCEL_TO_DECEL={ACCEL_TO_DECEL_DEFAULT}
  
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
  {% set MESH_NAME = params.MESH|default('default') %}
  M220 S100 ;reset feedrate
  M221 S100 ;reset flowrate
  G21 ;metric values
  G90 ;absolute positioning
  M82 ;set extruder to absolute mode
  M107 ;start with the fan off
  # M117 Homing ...
  # G28
  # G1 Z15.0 F140 ;move the platform down 15mm
  M117 Start heating ...
  # M104 S150
  # M190 S85
  # M109 S235
  STATUS_HEATING
  {% if printer.extruder.temperature < 150 %}
    M109 S150 # if less - wait untill heated
  {% else %}
    M104 S{printer.extruder.temperature} # else just keep min. temp
  {% endif %}
  
  # M109 S150 ; preheat extruder temp
  M140 S{BED_TEMP} ; set bed temp
  M190 S{BED_TEMP} ; wait for bed temp

  {% if not 'xyz' in printer.toolhead.homed_axes %}
    M117 Homing
    STATUS_HOMING
    G28
  {% endif %}

  # load mesh if no active loaded
  {% if printer.bed_mesh.profile_name == ''  %}
    BED_MESH_PROFILE LOAD={MESH_NAME}
  {% endif %}
  G1 Z15.0 F140 ;move the platform down 15mm
  STATUS_HEATING
  M109 S{EXTRUDER_TEMP}  ; wait for extruder temp
  M117 Start cleaning ...
  G92 E0 ;zero the extruded length
  G1 F200 E10 ;extrude 10mm of feed stock
  G92 E0 ;zero the extruded length again
  _PLAY_START_PRINT
  STATUS_CLEANING
  M117 Intro line ...
  # Line by X-axis
  G1 Z2.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
  G1 X20 Y3 Z0.28 F5000.0 ; Move to start position
  G1 X120 Y3 Z0.28 F1500.0 E15 ; Draw the first line
  G1 X120 Y3.3 Z0.28 F5000.0 ; Move to side a little
  G1 X20 Y3.3 Z0.3 F1500.0 E30 ; Draw the second line
  # Line by Y-axis
  # G1 X1.1 Y20 Z0.28 F5000.0 ; Move to start position
  # G1 X1.1 Y120.0 Z0.28 F1500.0 E15 ; Draw the first line
  # G1 X1.4 Y120.0 Z0.28 F5000.0 ; Move to side a little
  # G1 X1.4 Y20 Z0.3 F1500.0 E30 ; Draw the second line
  G92 E0 ; Reset Extruder
  G1 E-1 F500 ; Retract filiment by 1 mm
  G1 Z2.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed

  G1 X20 Y8 Z0.3 F140 ; Move over to prevent blob squish
  # G1 X6 Y20 Z0.3 F140 ; Move over to prevent blob squish
  G1 F140
  G92 E0 ; Reset Extruder
  STATUS_PRINTING
  M117 Printing...


[gcode_macro END_PRINT]
gcode:
  M117 Cooling down...
  STATUS_COOLING
  M104 S0 ; turn off extruder
  M140 S0  ; turn off bed
  M107 ; Fan off
  G91 ;relative positioning
  G1 E-2 F300 ;retract the filament a bit before lifting the nozzle, to release some of the pressure
  G1 Z+1 E-8 ;X-20 Y-20 F140 ;move Z up a bit and retract filament even more
  
  G90 ;Absolute positionning
  G1 X5 Y{printer.toolhead.axis_maximum.y|float - 5} F3000 ;present print
  ;G1 Z+5 F140 ; move up liittle for present
  # M84 ; do not off steppers
  ;M300 P300 S4000
  _PLAY_FINISH_PRINT
  STATUS_PART_READY
  # BED_MESH_CLEAR
  M117 Finished.

[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : False ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 0.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 218.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 10.0   ; the value to retract while PAUSE
variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : 1.0  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : 218.0  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True

#                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
# !!! Custom macros, please use with care and review the section of the corresponding macro.
# These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
# Only  single line commands are supported, please create a macro if you need more than one command.
# variable_user_pause_macro : ""    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
# variable_user_resume_macro: ""    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
# variable_user_cancel_macro: ""    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode:



# [gcode_macro CANCEL_PRINT]
# rename_existing: BASE_CANCEL_PRINT
# gcode:
#  ## Move head and retract only if not already in the pause state and park set to true
#   {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
#     _TOOLHEAD_PARK_PAUSE_CANCEL
#   {% endif %}
#   ; small retract on cancel  
#   # G91
#   # G1 X5 Y5 Z0.2 F5000 ;wipe
#   # G1 E-20 F1300
#   STATUS_COOLING
#   TURN_OFF_HEATERS
#   M106 S0
#   BASE_CANCEL_PRINT
#     # {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
#     #   PAUSE
#     # {% endif %}
    
#     # TURN_OFF_HEATERS
#     # CLEAR_PAUSE
#     # SDCARD_RESET_FILE
#     # BASE_CANCEL_PRINT

# [gcode_macro PAUSE]
# rename_existing: BASE_PAUSE
# gcode:
#   _SUPERMARIO_ONE_UP
#   M117 Paused
#   BASE_PAUSE
#   _TOOLHEAD_PARK_PAUSE_CANCEL
#   STATUS_READY
#   SET_IDLE_TIMEOUT TIMEOUT=9000 #2.5 hour timeout


# [gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
# description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
# variable_extrude: 10.0
# gcode:
#       ##### set park positon for x and y #####
#   # default is your max posion from your printer.cfg
#    ##### set defaults #####
#   {% set max_x = printer.toolhead.axis_maximum.x|float - 5 %}
#   {% set max_y = printer.toolhead.axis_maximum.y|float - 5 %}
#   {% set x_park = params.X|default(max_x) %}      #edit to your park position
#   {% set y_park = params.Y|default(max_y) %}      #edit to your park position
#   #{% set z = params.Z|default(10)|float %} #edit to your park position
#   #{% set e = params.E|default(50) %}        #edit to your retract length
  
#   {% set z_park_delta = 2.0 %}
#   ##### calculate save lift position #####
#   {% set max_z = printer.toolhead.axis_maximum.z|float %}
#   {% set act_z = printer.toolhead.position.z|float %}
#   {% if act_z < (max_z - z_park_delta) %}
#     {% set z_safe = z_park_delta %}
#   {% else %}
#     {% set z_safe = max_z - act_z %}
#   {% endif %}
#   ##### end of definitions #####
#   {% if printer.extruder.can_extrude|lower == 'true' %}
#     M83
#     G1 E-{extrude} F2100
#     {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
#   {% else %}
#     {action_respond_info("Extruder not hot enough")}
#   {% endif %}
#   {% if "xyz" in printer.toolhead.homed_axes %}
#     G91
#     G1 Z{z_safe} F900
#     G90
#     G1 X{x_park} Y{y_park} F6000
#     {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
#   {% else %}
#     {action_respond_info("Printer not homed")}
#   {% endif %}



# [gcode_macro RESUME]
# description: Resume the actual running print
# rename_existing: RESUME_BASE
# gcode:
#   ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####
#   {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
#   #### get VELOCITY parameter if specified ####
#   {% if 'VELOCITY' in params|upper %}
#     {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
#   {%else %}
#     {% set get_params = "" %}
#   {% endif %}
#   ##### end of definitions #####
#   {% if printer.extruder.can_extrude|lower == 'true' %}
#     M83
#     G1 E{extrude} F2100
#     {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
#   {% else %}
#     {action_respond_info("Extruder not hot enough")}
#   {% endif %}
#   STATUS_PRINTING
#   RESUME_BASE {get_params}
    
# [gcode_macro RESUME]
# rename_existing: BASE_RESUME
# gcode:
#     ##### set defaults #####
#     {% set e = params.E|default(1) %} #edit to your retract length
#     M117 Printing
#     G91
#     G1 E{e} F2100
#     G90
#     RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
#     BASE_RESUME
#     STATUS_PRINTING

[gcode_macro REPEAT_LAST_PRINT]
description: Repeat the last print
gcode:
    {% if 'save_variables' in printer %}
        {% set svv = printer.save_variables.variables %}
        {% if 'last_file' in svv %}
            {% set last_file=svv.last_file %}
            SDCARD_PRINT_FILE FILENAME="{last_file}"
        {% else %}
            RESPOND TYPE=error MSG="last_print not found in printer.save_variables"
        {% endif %}
    {% else %}
        RESPOND TYPE=error MSG="save_variables config section not defined"
    {% endif %}

[gcode_macro T0]
gcode:


# [gcode_macro G28]
# rename_existing: G990028
# gcode:
#   STATUS_HOMING
#   G990028

[gcode_macro G29]
gcode:
 G28
 BED_MESH_CALIBRATE
 BED_MESH_PROFILE SAVE=p1
 G1 X0 Y0 Z5 F4000

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro PID_E]
gcode:
  STATUS_HEATING
  {% set T = params.T|default(255) %}
  PID_CALIBRATE HEATER=extruder TARGET={T}

[gcode_macro PID_B]
gcode:
  STATUS_HEATING
  {% set T = params.T|default(80) %}
  PID_CALIBRATE HEATER=heater_bed TARGET={T}

[gcode_macro M73]
rename_existing: M73.1
variable_p: 0.0
variable_r: 0.0
gcode:
   {% set P = params.P|default(0)|int %}
   {% set R = params.R|default(0)|int %}
   M73.1 P{P}
   SET_GCODE_VARIABLE MACRO=M73 VARIABLE=p VALUE={P}
   SET_GCODE_VARIABLE MACRO=M73 VARIABLE=r VALUE={R}


[display_template _printing_time]
text:
   {% set ptime = printer["gcode_macro M73"].r %}
   { "%02d:%02d" % (ptime // 60, ptime % 60) }
# [gcode_macro M300]
# default_parameter_S=1000
# default_parameter_P=100
# gcode:  SET_PIN PIN=BEEPER_pin VALUE={S}
#         G4 P{P}
#         SET_PIN PIN=BEEPER_pin VALUE=0


#### DEBUG ####
[gcode_macro PSTATUS]
gcode:
    {% if params.S3 %}
    {% set info = printer[params.S1][params.S2][params.S3] %}
    {% elif params.S2 %}
    {% set info = printer[params.S1][params.S2] %}
    {% elif params.S1 %}
    {% set info = printer[params.S1] %}
    {% else %}
    {% set	info = printer.idle_timeout.state %}
    {% endif %}
    {action_respond_info(info|string)}