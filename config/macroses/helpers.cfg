
[gcode_macro GRADUALLY_HEAT_BED]
description: Preheats bed gradually, within several iterations, to reduce peak power usage
# variable_gradually_preheat_allowed: False
gcode:
  {% set DEGREE_PER_STEP = params.DEGREE_PER_STEP|default(10)|int %}
  {% set DELAY_IN_SEC = params.DELAY_IN_SEC|default(30)|float %}
  {% set TARGET = params.TARGET|default(60)|float %} # printer.heater_bed.target
  {%
  set current_bed_temp = printer.heater_bed.temperature|float %}
  {% set temp_difference = TARGET - current_bed_temp %}
  {% set steps_count = (temp_difference//DEGREE_PER_STEP)|int %}
  # {% set first_step = temp_difference % 10 %}
  
  # RESPOND MSG="input: delay: {DELAY_IN_SEC} per step: {DEGREE_PER_STEP} target: {TARGET} current: {current_bed_temp}"
  # RESPOND MSG="diff: {temp_difference} steps: {steps_count} rest: {temp_difference%10}"
  {% if temp_difference > 0 %}
    # SET_GCODE_VARIABLE 
    # SET_GCODE_VARIABLE MACRO=GRADUALLY_HEAT_BED VARIABLE=gradually_preheat_allowed VALUE=True
    G4 P1000 # wait to apply SET_GCODE_VARIABLE
    {% for step in range(steps_count) %}
      # RESPOND MSG="allowed: {printer["gcode_macro GRADUALLY_HEAT_BED"].gradually_preheat_allowed} vs {gradually_preheat_allowed}"
      #{% if gradually_preheat_allowed == True %}
      # RESPOND MSG="iteration: {step+1}"
      {% set step_temp = current_bed_temp|int + (step+1) * DEGREE_PER_STEP %}
      RESPOND MSG="Preheat bed to {step_temp}"
      M140 S{step_temp} # set bed temp
      M190 S{step_temp} # and wait for temp
      G4 P{DELAY_IN_SEC * 1000} # wait
     # {% endif %}
    {% endfor %}
  {% endif %}
  #{% if gradually_preheat_allowed == True %}
  RESPOND MSG="Set final bed temp: {TARGET}"
  M140 S{TARGET}
  M190 S{TARGET}
  #{% endif %}


# [gcode_macro TURN_OFF_BED_PREHEAT]
# gcode:
#   SET_GCODE_VARIABLE MACRO=GRADUALLY_HEAT_BED VARIABLE=gradually_preheat_allowed VALUE=False